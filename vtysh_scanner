#!/usr/bin/perl
use strict;
use warnings;

my @neighbors;

open NEIGHBORS, "vtysh -c 'show ip bgp summary'|" or die "can't open vtysh summary: $!";
my $my_as;
while (my $line = <NEIGHBORS>) {
    if ($line =~ /^(\d+\.\d+\.\d+\.\d+\s)/) {
	push @neighbors, $1;
    } elsif ($line =~ /local AS number (\d+)/) {
	$my_as = $1;
    }
}
close NEIGHBORS or die "can't close vtysh summary: $!";

my %peering;
my %as;

foreach my $neighbor (@neighbors) {

    open ROUTES, "vtysh -c 'show ip bgp neighbors $neighbor routes'|" or die "can't open vtysh routes for $neighbor: $!";
    my $colstart = 0;
    while (my $line = <ROUTES>) {

	if ($line =~ /^(\*.*) i/) {

	    my $last_as = undef;
	    foreach my $as ( $my_as, split (/ /, substr($1, $colstart)) ) {
		if (defined $last_as) {
		    my ($from, $to) = sort ($as, $last_as);
		    $peering{"$from:$to"}++;
		}
		$as{$as}++;
		$last_as = $as;
	    }

	} elsif ($line =~ /Path/) {
	    $colstart = index $line, 'Path';
	}
	    
    }
    close ROUTES or die "can't open vtysh routes for $neighbor: $!";
}

my %info;
open INFO, '<', 'info.conf' or die "can't open `info.conf': $!";
while (my $line = <INFO>) {
    $line =~ s/^\s+//;
    $line =~ s/\s+$//;
    next if $line eq '';
    next if $line =~ /^#/;
    my ($as, $name, $type) = split /\s+/, $line;
    $info{$as}->{NAME} = $name if defined $name;
    $info{$as}->{TYPE} = $type if defined $type;
}
close INFO or die "can't close `info.conf': $!";

use GraphViz;

my $g = GraphViz->new();

foreach my $as (keys %as) {
    $g->add_node($as);
    $g->add_node($as, label => "$as: $info{$as}->{NAME}")  if exists $info{$as}->{NAME};
    $g->add_node($as, style => 'filled', fillcolor => 'lightgrey') if exists $info{$as}->{TYPE};
    $g->add_node($as, style => 'filled', fillcolor => 'lightblue') if $as == $my_as;
}

foreach my $peering (keys %peering) {
    die unless $peering =~ /(.*):(.*)/;
    $g->add_edge($1 => $2, 'dir' => 'none');
}

print $g->as_png;

