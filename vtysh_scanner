#!/usr/bin/perl
#
# vtysh_scanner - print a network graph of routing information
# 
# Copyright (C) 2011  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL 3 or later.
# 
use strict;
use warnings;


### subroutines

sub read_vtysh_paths($$)
# read path information from vtysh
# figure out, on which column the paths begin
{
    local *FH = shift;
    my $marker = shift;
    my @ret;

    my $startcol = 0;
    while (my $line = <FH>) {

	if ($line =~ /^(${marker}.*) i/) {
	    next if length($1) < $startcol;
	    push @ret, substr($1, $startcol);

	} elsif ($line =~ /Path/) {
	    $startcol = index $line, 'Path';
	}
	    
    }

    return @ret;
}


### read configuration

my %config;
if ( -r 'info.conf') {
    open CONFIG, '<', 'info.conf' or die "can't open `info.conf': $!";
    while (my $line = <CONFIG>) {
	$line =~ s/^\s+//;
	$line =~ s/\s+$//;
	next if $line eq '';
	next if $line =~ /^#/;
	my ($as, $name, $type) = split /\s+/, $line;
	$config{$as}->{NAME} = $name if defined $name;
	$config{$as}->{TYPE} = $type if defined $type;
    }
    close CONFIG or die "can't close `info.conf': $!";
}


### collect information

my @neighbors;

open NEIGHBORS, "vtysh -c 'show ip bgp summary'|" or die "can't open vtysh summary: $!";
my $my_as;
while (my $line = <NEIGHBORS>) {
    if ($line =~ /^(\d+\.\d+\.\d+\.\d+\s)/) {
	push @neighbors, $1;
    } elsif ($line =~ /local AS number (\d+)/) {
	$my_as = $1;
    }
}
close NEIGHBORS or die "can't close vtysh summary: $!";

my %peering;
my %as;

foreach my $neighbor (@neighbors) {

    open ROUTES, "vtysh -c 'show ip bgp neighbors $neighbor routes'|" or die "can't open vtysh routes for $neighbor: $!";

    # pick only valid routes
    foreach my $line (read_vtysh_paths(*ROUTES, '\*')) {

	my $last_as = undef;
	foreach my $as ( $my_as, split (/ /, $line) ) {
	    if (defined $last_as) {
		my ($from, $to) = sort ($as, $last_as);
		$peering{"$from:$to"}++;
	    }
	    $as{$as}++;
	    $last_as = $as;
	}
	
    }
    close ROUTES or die "can't close vtysh routes for $neighbor: $!";
}

my %active;

open ACTIVE, "vtysh -c 'show ip bgp'|" or die "can't open vtysh active routes: $!";

# pick only valid and best routes
foreach my $line (read_vtysh_paths(*ACTIVE, '\*>')) {
    
    my $last_as = undef;
    foreach my $as ( $my_as, split (/ /, $line) ) {
	$active{"${last_as}:${as}"}++ if defined $last_as;
	$last_as = $as;
    }
    
}
close ACTIVE or die "can't close vtysh active routes: $!";


### print graph

use GraphViz;

my $g = GraphViz->new();

foreach my $as (keys %as) {
    $g->add_node($as);
    $g->add_node($as, label => "$as\n$config{$as}->{NAME}")  if exists $config{$as}->{NAME};
    $g->add_node($as, style => 'filled', fillcolor => 'lightgrey') if exists $config{$as}->{TYPE};
    $g->add_node($as, style => 'filled', fillcolor => 'lightblue') if $as == $my_as;
}

foreach my $peering (keys %peering) {
    die unless $peering =~ /(.*):(.*)/;
    if (exists $active{$peering}) {
	$g->add_edge($1 => $2);
    } elsif (exists $active{"$2:$1"}) {
	$g->add_edge($2 => $1);
    } else {
	$g->add_edge($1 => $2, 'dir' => 'none', weight => 0, color => '0, 0, 0.5');
    }
}

print $g->as_png;

